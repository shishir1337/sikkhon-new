import { PrismaService } from '../../../src/modules/prisma/prisma.service';
import { ResponseModel } from '../models/response.model';
import { NestExpressApplication } from '@nestjs/platform-express';
import { User } from '@prisma/client';
export declare let app: NestExpressApplication;
export declare let PrismaClient: PrismaService;
export declare let myLogger: any;
export declare function setApp(nestapp: any): Promise<void>;
export declare function createUniqueCode(): any;
export declare function addPhotoPrefix(inputString: string): string;
export declare function processCourseLinks(course: any): any;
export declare function hashedPassword(password: string): Promise<string>;
export declare function wordCountMultilingual(inputString: any): any;
export declare function processException(e: any): void;
export declare function successResponse(msg?: string, data?: object): ResponseModel;
export declare function errorResponse(msg?: string, data?: object): ResponseModel;
export declare function generateMailKey(): number;
export declare function addDayWithCurrentDate(dayCount: number): Date;
export declare function clearTrailingSlash(str: string): string;
export declare function exchange_app_url(): string;
export declare function base_url(): string;
export declare function envAppName(): string;
export declare function appName(): Promise<string>;
export declare function emailAppName(): Promise<string>;
export declare function isArrayofObjects(arr: any): boolean;
export declare function isValidArrayOfObjectsStringChecker(jsonString: any): boolean;
export declare function formatLimitOffset(payload: any): Promise<{
    limit: number;
    offset: number;
}>;
export declare function paginatioOptions(payload: any): Promise<{
    skip: number;
    take: number;
}>;
export declare function fileToBlob(file: any, callback: any): void;
export declare function saveAudioLocally(file: any, filePath: string): Promise<unknown>;
export declare function paginationMetaData(model: string | string[] | any, payload: any, whereCondition?: {}): Promise<{
    total: number;
    lastPage: number;
    currentPage: number;
    perPage: number;
    prev: number;
    next: number;
}>;
export declare function getAdminSettingsData(slugs?: any): Promise<{}>;
export declare function getInstructorSettingsData(user_id: number, slugs?: any): Promise<{}>;
export declare const fetchMyUploadFilePathById: (uploadUrl: string | undefined, metaImage?: number) => Promise<any>;
export declare function calculateDiscountedPrice(price: number, discountPercentage: number): number;
export declare function getTotalDiscountAmount(totalPrice: number, disCountedAmount: number, discountType: number): number;
export declare const adminSettingsValueBySlug: (slug: string) => Promise<any>;
export declare const instructorSettingsValueBySlug: (user_id: number, slug: string) => Promise<any>;
export declare const saveBase64ImageAsJpg: (base64Image: any) => Promise<unknown>;
export declare function generatePromptForCode(description: string, codingLanguage: string, codingLevel: string): Promise<string>;
export declare function generatePromptForTranslate(text: string, language: string): Promise<string>;
export declare function generatePromptForJson(topic: string): Promise<string>;
export declare function createSlug(categoryName: any): Promise<string>;
export declare function createUniqueSlug(title: string): Promise<string>;
export declare function storeException(message: string, type?: string, error?: any): Promise<void>;
export declare function userRolesPermissionObject(roles: string): Promise<{
    is_admin: boolean;
    is_super_admin: boolean;
    is_instructor: boolean;
}>;
export declare function checkRoleIsValid(roles: string, checkRole: number): Promise<Boolean>;
export declare function CheckEmailNickName(email: string, nickName: string): Promise<ResponseModel>;
export declare function removePasswordFromUserList(userList: User[]): Promise<Omit<User, 'password'>[]>;
export declare function updateOrCreateAdminSettings(slugKey: any, values: any): Promise<void>;
export declare function generatePageArray(totalLength: number, itemsPerPage?: number): Promise<number[]>;
export declare function getRandomPageNumberExcluding(array1: number[], visited_offset?: string, nextPage?: boolean, currentPage?: number): Promise<number>;
export declare function paginatioOptionsRandomly(totalItems: number, payload: any): Promise<{
    skip: number;
    take: number;
}>;
export declare function paginationMetaDataRandomly(totalItems: number, currentPage: number, payload: any): Promise<{
    total: number;
    lastPage: number;
    currentPage: number;
    perPage: number;
    prev: any;
    next: number;
}>;
export declare function checkTwoArraysAreEqual(array1: any[], array2: any[]): Promise<boolean>;
export declare function convertMinutesToHoursAndMinutes(minutes: number): Promise<string>;
export declare function formatDateTime(date: any): Promise<string>;
export declare function generateAccessTokenFunction(appID: string, appCertificate: string, channelName: string, uid: number, expirationTimeInSeconds: number, role: any): Promise<string>;
export declare function generateChannelName(title: string): string;
